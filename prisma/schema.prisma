generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @unique
  email         String   @unique
  firstName     String
  lastName      String
  createdAt     DateTime @default(now())
  profileImage  String?
  customUrl     String?  @unique // For admin/dashboard URL
  artistPageUrl String?  @unique // For public artist profile URL
  dateJoined    DateTime @default(now())
  enrolled      Boolean  @default(false)
  permissions   String   @default("User")
  updatedAt     DateTime @default(now()) @updatedAt

  // Artist Profile Fields
  artistType    ArtistType? // Using enum
  workType      CreativeWorkType? // Using enum
  bio           String?           @db.Text
  socialLinks   Json?             @default("{}")
  skills        String[]          @default([])
  achievements  Json?             @default("[]")
  featuredWorks Json?             @default("[]")

  // Relations
  courses            Course[]
  enrollments        Enrollment[]
  projects           Project[]
  quizzes            Quiz[]
  curriculum         UserCurriculum[]
  conceptCompletions ConceptCompletion[]
  sectionCompletions SectionCompletion[]
  projectCompletions ProjectCompletion[]
  quizCompletions    QuizCompletion[]
}

enum ArtistType {
  VISIONARY
  CONSUMMATE_PROFESSIONAL
  ANALYZER
  TECH_ARTIST
  ENTERTAINER
  MAVERICK
  DREAMER
  FEELER
  TORTURED
  SOLO
}

enum CreativeWorkType {
  ENTREPRENEUR
  TEAM_PLAYER
  CONNECTOR_ORGANIZER
  FINISHER
  ENTHUSIASTIC_FACILITATOR
  CREATIVE_INITIATOR
  COLLABORATOR
}

model Course {
  id          String           @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  sections    Section[]
  curriculum  UserCurriculum[]
}

model Section {
  id          String              @id @default(cuid())
  title       String
  shortTitle  String?
  description String?
  courseId    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  order       Int                 @default(0)
  concepts    Concept[]
  course      Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completions SectionCompletion[]
}

model Concept {
  id               String              @id @default(cuid())
  title            String
  shortTitle       String?
  content          Json                @default("[]")
  videoUrl         String?
  description      String?
  shortDescription String?
  imageUrl         String?
  sectionId        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  quizId           String?
  order            Int                 @default(0)
  attachments      Json?               @default("[]")
  audioUrl         String?
  blocks           Json?               @default("[]")
  metadata         Json?               @default("{\"version\": 1, \"editorConfig\": {\"customStyles\": [], \"defaultStyles\": {}}}")
  resources        Json?               @default("[]")
  quiz             Quiz?               @relation(fields: [quizId], references: [id])
  section          Section             @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  curriculum       UserCurriculum[]
  completions      ConceptCompletion[]
}

model Project {
  id          String              @id @default(cuid())
  title       String
  description String?
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions ProjectCompletion[]
}

model Quiz {
  id          String           @id @default(cuid())
  title       String
  description String?
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  concepts    Concept[]
  questions   Question[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions QuizCompletion[]
}

model Question {
  id      String   @id @default(cuid())
  content String
  quizId  String
  answers Answer[]
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model UserCurriculum {
  id          String   @id @default(cuid())
  userId      String
  conceptId   String
  courseId    String
  order       Int      @default(0)
  weekId      String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  concept     Concept  @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, conceptId])
  @@index([userId, courseId])
  @@index([courseId])
  @@index([conceptId])
}

model ConceptCompletion {
  id        String   @id @default(cuid())
  userId    String
  conceptId String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  concept   Concept  @relation(fields: [conceptId], references: [id], onDelete: Cascade)

  @@unique([userId, conceptId])
  @@index([userId])
  @@index([conceptId])
}

model SectionCompletion {
  id        String   @id @default(cuid())
  userId    String
  sectionId String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  section   Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([userId, sectionId])
  @@index([userId])
  @@index([sectionId])
}

model ProjectCompletion {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model QuizCompletion {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  completed Boolean  @default(false)
  score     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
  @@index([userId])
  @@index([quizId])
}
