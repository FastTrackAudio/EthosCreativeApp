datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @unique
  email         String    @unique
  firstName     String
  lastName      String
  profileImage  String?
  enrolled      Boolean   @default(false)
  permissions   String    @default("User")
  artistPageUrl String?
  dateJoined    DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  courses       Course[]
  projects      Project[]
  quizzes       Quiz[]
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  userId      String
  sections    Section[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Section {
  id          String    @id @default(cuid())
  title       String
  description String?
  order       Int       @default(0)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  concepts    Concept[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Concept {
  id          String   @id @default(cuid())
  title       String
  content     Json     @default("{}")
  videoUrl    String?
  description String?
  imageUrl    String?
  order       Int      @default(0)
  sectionId   String
  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  quiz        Quiz?    @relation(fields: [quizId], references: [id])
  quizId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  concepts    Concept[]
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id      String   @id @default(cuid())
  content String
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
